name: ci

on:
  push:
    branches: [master]
  pull_request:

jobs:
  test:
    strategy:
      matrix:
        include:
          - runner: ubuntu-latest
            os: Linux
            arch: x86_64
            clang-version: 18
          - runner: ubuntu-22.04
            os: Linux
            arch: x86_64
            clang-version: 15
          - runner: macos-13
            os: macOS
            arch: x86_64
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4
      - run: rustup component add rustfmt rustc-dev
      # rust-cache very carefully caches toolchains and target directories,
      # based on the job and toolchain and other factors. See
      # https://github.com/Swatinem/rust-cache#cache-details for what gets
      # cached, what gets used as part of the key, and what additional handling
      # happens to make the cache reliable and smaller.
      - uses: Swatinem/rust-cache@v2

      - name: Install packages (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install \
            clang \
            clang-tools \
            cmake \
            curl \
            git \
            gperf \
            libbrotli-dev \
            libclang-${{ matrix.clang-version }}-dev \
            libgcrypt20 \
            libreadline-dev \
            libidn2-dev \
            libldap2-dev \
            libncurses5-dev \
            libnghttp2-dev \
            libpcre3-dev \
            libpsl-dev \
            libreadline-dev \
            librtmp-dev \
            libssl-dev \
            libtool \
            llvm \
            llvm-dev \
            luarocks \
            ninja-build \
            pkg-config \
            rcs \
            strace \
            unzip \
            zlib1g-dev

      - name: Install packages (macOS)
        if: runner.os == 'macOS'
        run: |
          # `bash` needed b/c macOS ships with bash 3, which doesn't support arrays properly
          brew install -q cmake ninja gpg llvm@17 bash

      - uses: astral-sh/setup-uv@v6

      - name: Install Python Packages
        run: |
          uv venv
          uv pip install -r ./scripts/requirements.txt

      - name: cargo fmt --check
        run: |
          export RUSTFLAGS="-D warnings"
          export RUSTDOCFLAGS="-D warnings"
          cargo fmt --check
      - name: cargo build --release
        run: |
          export RUSTFLAGS="-D warnings"
          export RUSTDOCFLAGS="-D warnings"
          # Don't build with `--all-features` as `--all-features` includes `--features llvm-static`,
          # which we don't want to test here (see https://github.com/immunant/c2rust/issues/500).
          cargo build --release
      - name: cargo test --release --workspace
        run: |
          export RUSTFLAGS="-D warnings"
          export RUSTDOCFLAGS="-D warnings"
          cargo test --release --workspace
      - name: Test translator
        run: |
          # `test_translator.py` compiles translated code,
          # which has tons of warnings.
          # `RUSTFLAGS="-D warnings"` would be inherited by that,
          # causing tons of errors, so don't set that.
          # `test_translator.py` does not rebuild,
          # so changing `RUSTFLAGS` will not trigger a full rebuild.
          uv run ./scripts/test_translator.py tests/
