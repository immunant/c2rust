---
source: c2rust-transpile/tests/snapshots.rs
expression: cat tests/snapshots/arrays.rs
input_file: c2rust-transpile/tests/snapshots/arrays.c
---
#![allow(
    dead_code,
    non_camel_case_types,
    non_snake_case,
    non_upper_case_globals,
    unused_assignments,
    unused_mut
)]
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed {
    pub y: ::core::ffi::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_0 {
    pub x: *mut ::core::ffi::c_char,
    pub y: ::core::ffi::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_1 {
    pub x: ::core::ffi::c_short,
    pub y: ::core::ffi::c_int,
}
#[derive(Copy, Clone)]
#[repr(C)]
pub struct C2RustUnnamed_2 {
    pub x: ::core::ffi::c_short,
    pub y: ::core::ffi::c_int,
}
static mut simple: [::core::ffi::c_char; 9] =
    unsafe { ::core::mem::transmute::<[u8; 9], [::core::ffi::c_char; 9]>(*b"mystring\0") };
static mut foo: *mut ::core::ffi::c_char =
    b"mystring\0" as *const u8 as *const ::core::ffi::c_char as *mut ::core::ffi::c_char;
#[no_mangle]
pub unsafe extern "C" fn entry() {
    let mut int_2d: [[::core::ffi::c_int; 1]; 1] = [[1 as ::core::ffi::c_int]];
    int_2d[0 as ::core::ffi::c_int as usize][0 as ::core::ffi::c_int as usize] +=
        9 as ::core::ffi::c_int;
    let mut int_empty_init: [::core::ffi::c_int; 16] = [0; 16];
    int_empty_init[15 as ::core::ffi::c_int as usize] += 9 as ::core::ffi::c_int;
    let mut int_too_long: [::core::ffi::c_int; 2] =
        [1 as ::core::ffi::c_int, 2 as ::core::ffi::c_int];
    let mut int_zero: [::core::ffi::c_int; 0] = [0; 0];
    let mut int_too_short: [::core::ffi::c_int; 16] = [0 as ::core::ffi::c_int; 16];
    int_too_short[15 as ::core::ffi::c_int as usize] += 9 as ::core::ffi::c_int;
    let mut struct_init_too_short: [C2RustUnnamed_0; 1] = [C2RustUnnamed_0 {
        x: 0 as *mut ::core::ffi::c_char,
        y: 0,
    }; 1];
    struct_init_too_short[0 as ::core::ffi::c_int as usize].y += 9 as ::core::ffi::c_int;
    let mut struct_init_too_long: [C2RustUnnamed; 1] = [{
        let mut init = C2RustUnnamed {
            y: 1 as ::core::ffi::c_int,
        };
        init
    }];
    struct_init_too_long[0 as ::core::ffi::c_int as usize].y += 9 as ::core::ffi::c_int;
    let mut char_with_string: [::core::ffi::c_char; 4] =
        ::core::mem::transmute::<[u8; 4], [::core::ffi::c_char; 4]>(*b"abc\0");
    let mut char_with_chars: [::core::ffi::c_char; 3] = [
        'd' as i32 as ::core::ffi::c_char,
        'e' as i32 as ::core::ffi::c_char,
        'f' as i32 as ::core::ffi::c_char,
    ];
    let mut char_with_ints: [::core::ffi::c_char; 2] =
        [1 as ::core::ffi::c_int as ::core::ffi::c_char, 0];
    let mut char_with_init: [::core::ffi::c_char; 5] =
        ::core::mem::transmute::<[u8; 5], [::core::ffi::c_char; 5]>(*b"abcd\0");
    let mut char_too_long: [::core::ffi::c_char; 3] =
        ::core::mem::transmute::<[u8; 3], [::core::ffi::c_char; 3]>(*b"abc");
    let mut char_too_short: [::core::ffi::c_char; 20] =
        ::core::mem::transmute::<[u8; 20], [::core::ffi::c_char; 20]>(
            *b"abc\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
        );
    let mut int_var_ptr: *mut ::core::ffi::c_int = int_empty_init.as_mut_ptr();
    let mut int_var_array_ptr: *mut [::core::ffi::c_int; 16] = &mut int_empty_init;
    let mut char_var_ptr_var: *mut ::core::ffi::c_char = char_with_string.as_mut_ptr();
    let mut char_var_array_ptr: *mut [::core::ffi::c_char; 4] = &mut char_with_string;
    let mut const_char_lit_ptr: *const ::core::ffi::c_char =
        b"abc\0" as *const u8 as *const ::core::ffi::c_char;
    let mut const_char_lit_array_ptr: *const [::core::ffi::c_char; 4] =
        b"abc\0" as *const [u8; 4] as *const [::core::ffi::c_char; 4];
    let mut char_lit_ptr: *mut ::core::ffi::c_char =
        b"abc\0" as *const u8 as *const ::core::ffi::c_char as *mut ::core::ffi::c_char;
    let mut char_lit_array_ptr: *mut [::core::ffi::c_char; 4] = b"abc\0" as *const [u8; 4]
        as *const [::core::ffi::c_char; 4]
        as *mut [::core::ffi::c_char; 4];
    let mut past_end: *mut ::core::ffi::c_char = &mut *simple
        .as_mut_ptr()
        .offset(::core::mem::size_of::<[::core::ffi::c_char; 9]>() as isize)
        as *mut ::core::ffi::c_char;
    past_end = &mut *foo.offset(8 as ::core::ffi::c_int as isize) as *mut ::core::ffi::c_char;
}
#[no_mangle]
pub unsafe extern "C" fn short_initializer() {
    let mut empty_brackets: [::core::ffi::c_int; 16] = [0; 16];
    let mut brackets_with_zero: [::core::ffi::c_int; 16] = [0 as ::core::ffi::c_int; 16];
    let mut brackets_with_one: [::core::ffi::c_int; 4] = [1 as ::core::ffi::c_int, 0, 0, 0];
    let mut excess_elements_1: [::core::ffi::c_int; 2] =
        [1 as ::core::ffi::c_int, 2 as ::core::ffi::c_int];
    let mut excess_elements_2: [::core::ffi::c_int; 0] = [0; 0];
    let mut single_struct: [C2RustUnnamed_2; 1] = [{
        let mut init = C2RustUnnamed_2 {
            x: 1 as ::core::ffi::c_short,
            y: 2 as ::core::ffi::c_int,
        };
        init
    }];
    let mut many_struct: [C2RustUnnamed_1; 3] = [
        {
            let mut init = C2RustUnnamed_1 {
                x: 1 as ::core::ffi::c_short,
                y: 2 as ::core::ffi::c_int,
            };
            init
        },
        C2RustUnnamed_1 { x: 0, y: 0 },
        C2RustUnnamed_1 { x: 0, y: 0 },
    ];
}
